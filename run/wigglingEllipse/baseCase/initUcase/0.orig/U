/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    floatingObject
    {
        name    rigidBodyMotionWithSlip;
        type    codedFixedValue;

        codeInclude
        #{
            #include "symmTransformField.H"
        #};

        code
        #{
/*
            const vector axis(1, 0, 0);
            vectorField v(2.0*this->patch().Cf() ^ axis);
            v.replace(vector::X, 1.0);
            operator==(v);
*/
            const fvMesh& mesh(patch().boundaryMesh().mesh());
            IOdictionary dynMeshDict
            (
                IOobject
                (
                    "bodyDict",
                    mesh.time().constant(),
                    mesh,
                    IOobject::MUST_READ,
                    IOobject::NO_WRITE
                )
            );
            const scalar vx(dynMeshDict.get<scalar>("vx0"));
            const scalar vy(dynMeshDict.get<scalar>("vy0"));
            const scalar omegaValue(dynMeshDict.get<scalar>("omega0"));
            const vector v(vx, vy, 0);
            const vector omega(0, 0, omegaValue);
            const scalar t = mesh.time().value();
            const scalar x = vx*t;
            const scalar y = vy*t;
            const vector CoR(x, y, 0);
            const vectorField nHat(this->patch().nf());

            const vectorField Up
            (
                (nHat & (v + (omega^(patch().Cf() - CoR))))*nHat
                    + transform(I - sqr(nHat), this->patchInternalField())
            );

            vectorField::operator=(Up);
        #};
        value           $internalField;
    }


    front
    {
        type            empty;
    }
    back
    {
        type            empty;
    }
    rim
    {
        type            pressureInletOutletVelocity;
        value           uniform (0 0 0);
//        type            slip;
    }
}


// ************************************************************************* //
